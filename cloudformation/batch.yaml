Description: >
  Docker Batch Configuration

Parameters:
  # API GATEWAY PARAMS - BEGIN
  ApiGatewayStageName:
    Type: String
    Default: "prod"
    AllowedValues:
      - 'prod'
  CORSAllowHeaders:
    Type: String
    Default: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  CORSAllowMethods:
    Type: String
    Default: "'DELETE,GET,HEAD,POST,OPTIONS,PUT,PATCH'"
  CORSAllowOrigin:
    Type: String
    Default: "'*'"
  # API GATEWAY PARAMS - END

#Metadata:

Resources:

  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: batch-api-job
      ContainerProperties:
        Image: 089600871681.dkr.ecr.us-west-1.amazonaws.com/batch-test:latest
        Vcpus: 1
        Memory: 2000
        Command: ["echo", "Hello World"]
      RetryStrategy:
        Attempts: 1

  BatchJobCompute:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: batch-api-compute
      Type: MANAGED
      ServiceRole: arn:aws:iam::089600871681:role/service-role/AWSBatchServiceRole
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        MaxvCpus: 64
        DesiredvCpus: 0
        InstanceTypes:
          - optimal
        Subnets:
          - subnet-d2971c8a
          - subnet-ad176fc9
        SecurityGroupIds:
          - sg-15583372
        InstanceRole: arn:aws:iam::089600871681:instance-profile/ecsInstanceRole

  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      Priority: 1
      JobQueueName: batch-api-queue
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchJobCompute

  GetBatchJobFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const batch = new AWS.Batch();
          exports.handler = function (event, context, callback) {

            let jobId = event.pathParameters['id'];
            console.log('JobId['+jobId+']');
            let params = {
              jobs: [jobId]
            };

            batch.describeJobs(params, function(err, data) {
              if (err) {
                // an error occurred
                console.log(err, err.stack);
                callback(null, {
                  statusCode: '500',
                  body: JSON.stringify({}),
                  headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Credentials": "true"
                  }
                });
              } else {
                let job = {};
                if (data.jobs.length > 0) {
                  job = data.jobs[0];
                }

                callback(null, {
                  statusCode: '200',
                  body: JSON.stringify(job),
                  headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Credentials": "true"
                  }
                });
              }
            });
          }
      Description: "List Batch Jobs Function"
      FunctionName: "batch-job-get"
      Role: !GetAtt "LambdaIAMRole.Arn"
      Handler: index.handler
      Runtime: "nodejs8.10"
      Timeout: 15

  GetBatchJobsFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const batch = new AWS.Batch();
          exports.handler = function (event, context, callback) {

            let status = 'SUCCEEDED';
            let maxResults = '10'

            if (event.queryStringParameters) {
              if (event.queryStringParameters.hasOwnProperty('status')) {
                status = event.queryStringParameters['status'];
              }
              if (event.queryStringParameters.hasOwnProperty('maxResults')) {
                maxResults = event.queryStringParameters['maxResults'];
              }
            }

            console.log('Status[' + status + '], MaxResults: [' + maxResults + ']');

            let params = {
              jobQueue: 'batch-api-queue',
              jobStatus: status,
              maxResults: maxResults,
            };

            batch.listJobs(params, function(err, data) {
              if (err) {
                // an error occurred
                console.log(err, err.stack);
                callback(null, {
                  statusCode: '500',
                  body: JSON.stringify({}),
                  headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Credentials": "true"
                  }
                });
              } else {
                // successful response
                //console.log(data);

                let jobs = [];
                data.jobSummaryList.forEach(function(job) {
                  console.log(job);
                  jobs.push(job);
                });
                callback(null, {
                  statusCode: '200',
                  body: JSON.stringify(jobs),
                  headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Credentials": "true"
                  }
                });
              }
            });
          }
      Description: "List Batch Jobs Function"
      FunctionName: "batch-job-get-all"
      Role: !GetAtt "LambdaIAMRole.Arn"
      Handler: index.handler
      Runtime: "nodejs8.10"
      Timeout: 15


  # https://stackoverflow.com/questions/57158200/api-gateway-integration-with-aws-batch
  PostBatchJobFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const batch = new AWS.Batch();
          exports.handler = function (event, context, callback) {

            var params = {
              jobDefinition: "batch-api-job",
              jobName: "batch-api-job-lambda",
              jobQueue: "batch-api-queue"
            };
            batch.submitJob(params, function(err, data) {
              if (err) {
                // an error occurred
                console.log(err, err.stack);
              } else {
                // successful response
                console.log(data);
              }
            });

            callback(null, {
              statusCode: '200',
              body: JSON.stringify({}),
              headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true"
              }
            });
          }
      Description: "Post Batch Job Function"
      FunctionName: "batch-job-post"
      Role: !GetAtt "LambdaIAMRole.Arn"
      Handler: index.handler
      Runtime: "nodejs8.10"
      Timeout: 15


  # API for executing jobs
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "batch"
      Description: "Batch Job Web Application Services"


  # CORS Support
  # Each resource must contain an OPTIONS method which returns CORS specific headers
  RootOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      ResourceId: !GetAtt "ApiGateway.RootResourceId"
      RestApiId: !Ref "ApiGateway"
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: !Sub "${CORSAllowHeaders}"
              method.response.header.Access-Control-Allow-Methods: !Sub "${CORSAllowMethods}"
              method.response.header.Access-Control-Allow-Origin: !Sub "${CORSAllowOrigin}"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  JobsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref "ApiGateway"
      ParentId: !GetAtt "ApiGateway.RootResourceId"
      PathPart: 'jobs'

  JobsOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      ResourceId: !Ref "JobsResource"
      RestApiId: !Ref "ApiGateway"
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: !Sub "${CORSAllowHeaders}"
              method.response.header.Access-Control-Allow-Methods: !Sub "${CORSAllowMethods}"
              method.response.header.Access-Control-Allow-Origin: !Sub "${CORSAllowOrigin}"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  PostJob:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref "JobsResource"
      RestApiId: !Ref "ApiGateway"
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "PostBatchJobFunction.Arn"

  ListJobs:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref "JobsResource"
      RestApiId: !Ref "ApiGateway"
      AuthorizationType: "AWS_IAM"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "GetBatchJobsFunction.Arn"

  JobResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref "ApiGateway"
      ParentId: !Ref "JobsResource"
      PathPart: '{id}'

  JobOptions:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      ResourceId: !Ref "JobResource"
      RestApiId: !Ref "ApiGateway"
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: !Sub "${CORSAllowHeaders}"
              method.response.header.Access-Control-Allow-Methods: !Sub "${CORSAllowMethods}"
              method.response.header.Access-Control-Allow-Origin: !Sub "${CORSAllowOrigin}"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  GetJob:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref "JobResource"
      RestApiId: !Ref "ApiGateway"
      AuthorizationType: "AWS_IAM"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "GetBatchJobFunction.Arn"

  ### IAM ROLES - BEGIN
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
#    RoleName: "batch-lambda-role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "lambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "dynamo"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "batch:SubmitJob"
                  - "batch:ListJobs"
                  - "batch:DescribeJobs"
                Resource: "*"
  ### IAM ROLES - END

  ### LAMBDA-API GATEWAY PERMISSIONS
  InvokePostJob:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "PostBatchJobFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/*"

  InvokeListJobs:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GetBatchJobsFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/*"

  InvokeGetJob:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GetBatchJobFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/*"