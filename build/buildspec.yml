# used by AWS CoOdePipeline to build and assemble artifacts
version: 0.2

env:
  variables:
    JAVA_HOME: "/usr/lib/jvm/java-8-openjdk-amd64"
#  parameter-store:
#    LOGIN_PASSWORD: /CodeBuild/dockerLoginPassword

# when configuring build in aws, there is option to choose environment
# ubunutu seems more flexible? or at least better examples exist
# fr example, aws doesn't support apt-get

phases:
  prebuild:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_URI=089600871681.dkr.ecr.us-west-1.amazonaws.com/batch-test
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  install:
    runtime-versions:
      java: openjdk8
    commands:
      - echo Entered the install phase...
      - apt-get update -y
      - apt-get install -y maven
    finally:
      - echo This always runs even if the update or install command fails
  pre_build:
    commands:
      - echo Entered the pre_build phase...
#      - docker login –u User –p $LOGIN_PASSWORD
    finally:
      - echo This always runs even if the login command fails
  build:
    commands:
      - echo Entered the build phase...
      - echo Build started on `date`
      - mvn install
      - docker build -t $REPOSITORY_URI:latest ./docker
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
    finally:
      - echo This always runs even if the install command fails
  post_build:
    commands:
      - echo Entered the post_build phase...
      - echo Build completed on `date`
artifacts:
  files:
    - batch/target/batch-1.0.jar
  discard-paths: yes
  secondary-artifacts:
    # must add this to build artifacts
    cloudformation:
      files:
        - cloudformation/batch.yaml
      discard-paths: yes
#    artifact2:
#      files:
#        - target/messageUtil-1.0.jar
#      discard-paths: yes
#cache:
#  paths:
#    - '/root/.m2/**/*'
