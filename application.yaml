Description: >
  Docker Batch Configuration

# Fn::ImportValue: sharedValueToImport
# !ImportValue sharedValueToImport

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - 'test'
  AppName:
    Type: String
    Default: 'batch-api'
  AppVersion:
    Type: String
    Default: 'v0'

  # API GATEWAY PARAMS - BEGIN
#  ApiGatewayStageName:
#    Type: String
#    Default: "prod"
#    AllowedValues:
#      - 'prod'
  CORSAllowHeaders:
    Type: String
    Default: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  CORSAllowMethods:
    Type: String
    Default: "'DELETE,GET,HEAD,POST,OPTIONS,PUT,PATCH'"
  CORSAllowOrigin:
    Type: String
    Default: "'*'"
  # API GATEWAY PARAMS - END

#Metadata:

Resources:

  # API for executing jobs
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-${AppName}-${AppVersion}-RestAPI'
      Description: "Web Application Services"

  JobsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt "ApiGateway.RootResourceId"
      PathPart: 'jobs'

  GetBatchJobsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:

      Description: "List Batch Jobs Function"
      FunctionName: !Sub '${Environment}-${AppName}-${AppVersion}-list-jobs'
      Role: !GetAtt "LambdaRole.Arn"
      Handler: index.handler
      Runtime: "nodejs8.10"
      Timeout: 15




  ListJobsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref JobsResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: "AWS_IAM"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt [ListJobsFunction, Arn]
#          - lambdaArn: !GetAtt "ListJobsFunction.Arn"

  ### IAM ROLES - BEGIN
  LambdaRole:
    Type: "AWS::IAM::Role"
    RoleName: !Sub '${Environment}-${AppName}-${AppVersion}-LambdaRole'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "lambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "dynamo"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "batch:SubmitJob"
                  - "batch:ListJobs"
                  - "batch:DescribeJobs"
                Resource: "*"
  ### IAM ROLES - END

  ### LAMBDA-API GATEWAY PERMISSIONS
  InvokeListJobs:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
#      FunctionName: !GetAtt "GetBatchJobsFunction.Arn"
      FunctionName: !Ref ListJobsFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/*"